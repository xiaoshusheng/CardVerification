apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao' // apply plugin

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    defaultConfig {
        applicationId rootProject.ext.android["applicationId"]
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }
    //指定jdk版本
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            buildConfigField("boolean", "IS_DEBUG", "false")
            buildConfigField("String", "BASE_URL", "\"https://release.cn/\"")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false//是否支持断点调试
            jniDebuggable false//是否可以调试NDK代码
            zipAlignEnabled true//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率
        }
        debug {
            buildConfigField("boolean", "IS_DEBUG", "true")
            buildConfigField("String", "BASE_URL", "\"https://debug.cn/\"")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true//是否支持断点调试
            jniDebuggable true//是否可以调试NDK代码
            zipAlignEnabled true//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率
        }
    }

    greendao {
        schemaVersion 1
        daoPackage 'com.wonders.bdhealthinsurance.db.greendao'
        targetGenDir 'src/main/java'
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["espresso"]
    implementation rootProject.ext.dependencies["design"]
    implementation rootProject.ext.dependencies["cardview"]
    //解决Glide找不到Android声明库问题
    annotationProcessor rootProject.ext.dependencies["annotation"]
    implementation rootProject.ext.dependencies["appcompat"]
    implementation rootProject.ext.dependencies["recyclerview"]
    implementation rootProject.ext.dependencies["constraintlayout"]
    //Retrofit
    implementation rootProject.ext.dependencies["retrofit2"]
    implementation rootProject.ext.dependencies["retrofit2_adapter"]
    implementation rootProject.ext.dependencies["retrofit2_converter"]
    //RxJava
    implementation rootProject.ext.dependencies["rxjava"]
    //auto_dispose代替RxLife 用于RxJava的订阅和解除
    implementation rootProject.ext.dependencies["autodispose"]
    implementation rootProject.ext.dependencies["autodispose_archcomponents"]
    //RxAndroid
    implementation rootProject.ext.dependencies["rxandroid"]
    //RxPermissions权限依赖
    implementation rootProject.ext.dependencies["rxpermissions"]
    //ButterKnife
    implementation rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife_compiler"]
    //utilCode
    implementation rootProject.ext.dependencies["utilcode"]
    //阿里的ARouter
    implementation rootProject.ext.dependencies["arouter"]
    annotationProcessor rootProject.ext.dependencies["arouter_compiler"]
    //图片glide
    implementation rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glide_compiler"]
    //动画lottie
    implementation rootProject.ext.dependencies["lottie"]
    // GreenGao
    implementation rootProject.ext.dependencies["greendao"]
    // 今日头条适配方案
    implementation rootProject.ext.dependencies["autosize"]
    //square内存泄漏分析工具leakCanary
    debugImplementation rootProject.ext.dependencies["leakcanary"]
    releaseImplementation rootProject.ext.dependencies["leakcanary_android"]
    // Optional, if you use support library fragments:
    debugImplementation rootProject.ext.dependencies["leakcanary_support_fragment"]
    //banner
    implementation rootProject.ext.dependencies["banner"]
    //MPAndroidChart
    implementation rootProject.ext.dependencies["android_chart"]
    //下拉刷新
    implementation rootProject.ext.dependencies["smartRefreshLayout"]
    implementation rootProject.ext.dependencies["smartRefresh_header"]
    implementation rootProject.ext.dependencies["legacy"]
    //EventBus
    implementation rootProject.ext.dependencies["eventBus"]
    //dialog
    implementation rootProject.ext.dependencies["dialog"]

}
